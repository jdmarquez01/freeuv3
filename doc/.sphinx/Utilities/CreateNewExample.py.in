#!/usr/bin/env python

""" Scripts to create a new example

./CreateNewExample.py /path/to/source/of/ITK
"""

import os
import sys
import argparse
import re
import fnmatch
import collections

try:
    # Python 3
    from io import StringIO
except ImportError:
    # Python 2
    from cStringIO import StringIO

get_input = input
if sys.version_info[:2] <= (2, 7):
    get_input = raw_input


def write_all_itk_headers(itk_source_dir):
    output = StringIO()
    for root, dirs, files in os.walk(os.path.join(itk_source_dir, 'Modules')):
        for f in fnmatch.filter(files, 'itk*.h'):
            output.write(f + u'\n')
    return output


def words(text):
    temp = re.findall('itk[A-Z][a-zA-Z_0-9]+', text)
    for i in range(len(temp)):
        var = temp[i]
        temp[i] = var[3:]
    return temp


def train(features):
    model = collections.defaultdict(lambda: 1)
    for f in features:
        model[f] += 1
    return model


def edits1(word):
    splits = [(word[:i], word[i:]) for i in range(len(word) + 1)]
    deletes = [a + b[1:] for a, b in splits if b]
    transposes = [a + b[1] + b[0] + b[2:] for a, b in splits if len(b) > 1]
    replaces = [a + c + b[1:] for a, b in splits for c in alphabet if b]
    inserts = [a + c + b for a, b in splits for c in alphabet]
    lowercases = [a + b[0].lower() + b[1:] for a, b in splits if b]
    uppercases = [a + b[0].upper() + b[1:] for a, b in splits if b]
    all_lowercase = [word[:].lower()]
    one_uppercase = [
        a[:].lower() + b[0].upper() + b[1:].lower() for a, b in splits if b]

    return set(
        deletes + transposes + replaces + inserts + lowercases + uppercases +
        all_lowercase + one_uppercase)


def known_edits2(word):
    return set(e2 for e1 in edits1(word) for e2 in edits1(e1) if e2 in NWORDS)


def known(words):
    return set(w for w in words if w in NWORDS)


def itkcorrect(word):
    candidates = (
        known([word]) or known(edits1(word)) or known_edits2(word) or [word])
    return max(candidates, key=NWORDS.get)


def space_out_camel_case(s):
    return re.sub('((?=[A-Z][a-z])|(?<=[a-z])(?=[A-Z]))', ' ', s)


def get_group_and_module_from_class_name(itk_dir, class_name):

    cmakefile = os.path.join(itk_dir, 'CMake', 'UseITK.cmake')
    result = dict()
    result['bool'] = False

    if class_name is None:
        return result

    if not os.path.exists(cmakefile):
        print ('Error: wrong path')
    else:
        path = ''

        for root, dirs, files in os.walk(os.path.join(itk_dir, 'Modules')):
            for f in files:
                if f == 'itk' + class_name + '.h':
                    path = root

        if len(path) != 0:

            temp = path.split(os.path.sep)
            depth = len(temp)

            result['Module'] = temp[depth - 2]
            result['Group'] = temp[depth - 3]
            result['bool'] = True

        else:
            print ('Error: this class is not part of itk')

    return result


# Write rst file
def write_example_rst_file(example_rst, class_name, synopsis):
    f = open(example_rst, 'w')
    title = space_out_camel_case(example_name)

    if title[0] == ' ':
        title = title[1:]

    f.write(title + '\n')
    for i in range(len(title)):
        f.write('=')
    f.write('\n\n')

    f.write('.. index::\n')
    f.write('   single: ' + class_name + '\n\n')

    f.write('Synopsis\n')
    f.write('--------\n\n')

    if synopsis is None:
        synopsis = get_input('Synopsis: ')
    f.write(synopsis + '\n\n\n')

    f.write('Results\n')
    f.write('-------\n\n')

    f.write('.. figure:: cthead1.png\n')
    f.write('  :scale: 50%\n')
    f.write('  :alt: Input image\n\n')
    f.write('  Input image\n\n')

    f.write('.. figure:: OutputBaseline.png\n')
    f.write('  :scale: 50%\n')
    f.write('  :alt: Output image\n\n')
    f.write('  Output image\n\n\n')

    f.write('Code\n')
    f.write('----\n\n')

    f.write('C++\n')
    f.write('...\n\n')
    f.write('.. literalinclude:: Code.cxx\n')
    f.write('   :lines: 18-\n\n')

    f.write('Python\n')
    f.write('......\n\n')
    f.write('.. literalinclude:: Code.py\n   :language: python\n')
    f.write('   :lines: 1, 18-\n\n\n')

    f.write('Classes demonstrated\n')
    f.write('--------------------\n')

    f.write('\n.. breathelink:: itk::' + class_name + '\n')

    f.close()


def write_example_cxx_file(example_cxx, class_name):

    f = open(example_cxx, 'w')

    f.write('/*=========================================================================\n')
    f.write(' *\n')
    f.write(' *  Copyright Insight Software Consortium\n')
    f.write(' *\n')
    f.write(' *  Licensed under the Apache License, Version 2.0 (the "License");\n')
    f.write(' *  you may not use this file except in compliance with the License.\n')
    f.write(' *  You may obtain a copy of the License at\n')
    f.write(' *\n')
    f.write(' *         http://www.apache.org/licenses/LICENSE-2.0.txt\n')
    f.write(' *\n')
    f.write(' *  Unless required by applicable law or agreed to in writing, software\n')
    f.write(' *  distributed under the License is distributed on an "AS IS" BASIS,\n')
    f.write(' *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n')
    f.write(' *  See the License for the specific language governing permissions and\n')
    f.write(' *  limitations under the License.\n')
    f.write(' *\n')
    f.write(' *=========================================================================*/\n\n')

    f.write('//#include \"itkImageFileReader.h\"\n')
    f.write('//#include \"itkImageFileWriter.h\"\n')
    f.write('#include \"itk' + class_name + '.h\"\n\n')

    f.write('int main( int argc, char* argv[] )\n')
    f.write('{\n')
    f.write('  //if( argc != 3 )\n')
    f.write('  //  {\n')
    f.write('  //  std::cerr << "Usage: "<< std::endl;\n')
    f.write('  //  std::cerr << argv[0];\n')
    f.write('  //  std::cerr << " <InputFileName> <OutputFileName>\";\n')
    f.write('  //  std::cerr << std::endl;\n')
    f.write('  //  return EXIT_FAILURE;\n')
    f.write('  //  }\n\n')
    f.write('  //const char * inputFileName = argv[1];\n')
    f.write('  //const char * outputFileName = argv[2];\n\n')

    f.write('  //const unsigned int Dimension = 2;\n\n')

    f.write('  //using PixelType = unsigned char;\n')
    f.write('  //using ImageType = itk::Image< PixelType, Dimension >;\n\n')

    f.write('  //using ReaderType = itk::ImageFileReader< ImageType >;\n')
    f.write('  //ReaderType::Pointer reader = ReaderType::New();\n')
    f.write('  //reader->SetFileName( inputFileName );\n\n')

    f.write(
        '  // using FilterType = itk::' + class_name +
        '< ImageType, ImageType >;\n')
    f.write('  //FilterType::Pointer filter = FilterType::New();\n')
    f.write('  //filter->SetInput( reader->GetOutput() );\n\n')

    f.write('  //using WriterType = itk::ImageFileWriter< ImageType >;\n')
    f.write('  //WriterType::Pointer writer = WriterType::New();\n')
    f.write('  //writer->SetFileName( outputFileName );\n')
    f.write('  //writer->SetInput( filter->GetOutput() );\n')
    f.write('  //try\n')
    f.write('  //  {\n')
    f.write('  //  writer->Update();\n')
    f.write('  //  }\n')
    f.write('  //catch( itk::ExceptionObject & error )\n')
    f.write('  //  {\n')
    f.write('  //  std::cerr << "Error: " << error << std::endl;\n')
    f.write('  //  return EXIT_FAILURE;\n')
    f.write('  //  }\n\n')

    f.write('  return EXIT_SUCCESS;\n')
    f.write('}\n')
    f.close()


def write_example_py_file(example_py, class_name):

    f = open(example_py, 'w')

    f.write('#!/usr/bin/env python\n')
    f.write('\n')
    f.write('# Copyright Insight Software Consortium\n')
    f.write('#\n')
    f.write('# Licensed under the Apache License, Version 2.0 (the "License")\n')
    f.write('# you may not use this file except in compliance with the License.\n')
    f.write('# You may obtain a copy of the License at\n')
    f.write('#\n')
    f.write('#        http://www.apache.org/licenses/LICENSE-2.0.txt\n')
    f.write('#\n')
    f.write('# Unless required by applicable law or agreed to in writing, software\n')
    f.write('# distributed under the License is distributed on an "AS IS" BASIS,\n')
    f.write('# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n')
    f.write('# See the License for the specific language governing permissions and\n')
    f.write('# limitations under the License.\n')
    f.write('\n')
    f.write('import sys\n')
    f.write('import itk\n')
    f.write('\n')
    f.write('#if len(sys.argv) != 3:\n')
    f.write('#    print(\'Usage: \' + sys.argv[0] + \' <InputFileName> <OutputFileName>\')\n')
    f.write('#    sys.exit(1)\n')
    f.write('#inputFileName = sys.argv[1]\n')
    f.write('#outputFileName = sys.argv[2]\n')
    f.write('#\n')
    f.write('#Dimension = 2\n')
    f.write('#PixelType = itk.UC\n')
    f.write('#ImageType = itk.Image[PixelType, Dimension]\n')
    f.write('#\n')
    f.write('#reader = itk.ImageFileReader[ImageType].New()\n')
    f.write('#reader.SetFileName(inputFileName)\n')
    f.write('#\n')
    filterInstance = class_name[0].lower() + class_name[1:]
    f.write('#' + filterInstance + ' = itk.' + class_name + '[ImageType, ImageType].New()\n')
    f.write('#' + filterInstance + '.SetInput(reader.GetOutput())\n')
    f.write('#\n')
    f.write('#writer = itk.ImageFileWriter[ImageType].New()\n')
    f.write('#writer.SetInput(' + filterInstance + '.GetOutput())\n')
    f.write('#writer.SetFileName(outputFileName)\n')

    f.close()

    st = os.stat(example_py)
    os.chmod(example_py, st.st_mode | 0o0111)


if __name__ == '__main__':
    # parsing arguments
    parser = argparse.ArgumentParser(description='Create a new example.')

    parser.add_argument('itk_source_dir', help='path to itk source tree')
    parser.add_argument(
        '--class-name', action='store', dest='class_name',
        help='class name to be demonstrated (e.g. ImageToImageFilter)')
    parser.add_argument(
        '--example-name', action='store', dest='example_name',
        help='example name (e.g. WriteAPointset)')
    parser.add_argument(
        '--synopsis', action='store', dest='synopsis',
        help='synopsis (e.g. Write a PointSet)')

    args = parser.parse_args()

    # check itk_source_tree is a real source tree of ITK
    # Note: It would work even with an outdated version of ITK
    itk_dir = args.itk_source_dir
    useitk_cmake = os.path.join(itk_dir, 'CMake', 'UseITK.cmake')

    if not os.path.exists(useitk_cmake):
        print ('Error: wrong path for itk source tree')
        sys.exit()

    itk_headers = write_all_itk_headers(itk_dir)

    NWORDS = train(words(itk_headers.getvalue()))

    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'

    # beginning
    temp_res = dict()
    temp_res['bool'] = False

    class_name = args.class_name
    temp_res = get_group_and_module_from_class_name(itk_dir, class_name)

    while not temp_res['bool']:
        class_name = get_input("Please enter a class: ")
        class_name = itkcorrect(class_name)

        temp_res = get_group_and_module_from_class_name(
            args.itk_source_dir, class_name)

    group_name = temp_res['Group']
    module_name = temp_res['Module']
    example_name = args.example_name

    if example_name is None:
        example_name = get_input("Please enter an example name: ")

    # Collect directories
    root_dir = os.path.abspath('@ITKExamples_SOURCE_DIR@')

    example_src_dir = os.path.join(root_dir, "src")
    example_dir = os.path.join(
        example_src_dir, group_name, module_name, example_name)

    # if ITKExmaples/src/$group_name/$module_name/$example_name does not exist
    if not os.path.exists(example_dir):

        # if ITKExamples/src/Example/$group_name does not exist
        if not os.path.exists(os.path.join(example_src_dir, group_name)):

            # make directory ITKExamples/src/$group_name
            os.mkdir(os.path.join(example_src_dir, group_name))

            # populate ITKExamples/src/$group_name/CMakeLists.txt
            f = open(os.path.join(
                example_src_dir, group_name, 'CMakeLists.txt'), 'a+')
            f.write('add_subdirectory(' + group_name + ') \n')

            f.write('')
            f.close()

            # populate ITKExamples/src/$group_name/index.rst
            f = open(
                os.path.join(example_src_dir, group_name, 'index.rst'), 'a+')
            f.write(group_name + '\n')
            for i in range(len(group_name)):
                f.write('=')
            f.write('\n\n')

            f.write('.. toctree::\n')
            f.write('  :maxdepth: 2\n\n')
            f.close()

        # if ITKExamples/src/$group_name/$module_name does not exist
        if not os.path.exists(
                os.path.join(example_src_dir, group_name, module_name)):

            # make directory ITKExamples/src/$group_name/$module_name
            os.mkdir(os.path.join(example_src_dir, group_name, module_name))

            # append 'add_subdirectory_if_module_enabled( $module_name )'
            # into ITKExamples/src/$group_name/CMakeLists.txt
            f = open(os.path.join(
                example_src_dir, group_name, 'CMakeLists.txt'), 'a+')
            f.write(
                'add_subdirectory_if_module_enabled(' + module_name + ')\n')
            f.close()

            # append '$module_name/index.rst' into
            # ITKExamples/src/$group_name/index.rst
            f = open(os.path.join(
                example_src_dir, group_name, 'index.rst'), 'a+')
            f.write('  ' + module_name + '/index.rst\n')
            f.close()

            # append 'add_example($example_name)' into
            # ITKExamples/src/$group_name/$module_name/CMakeLists.txt
            f = open(os.path.join(
                example_src_dir, group_name, module_name, 'index.rst'), 'a+')
            f.write(module_name + '\n')
            for i in range(len(module_name)):
                f.write('=')
            f.write('\n\n')

            f.write('.. toctree::\n')
            f.write('  :maxdepth: 1\n\n')
            f.close()
        # endif

        # append 'add_example( $example_name )'
        # into ITKExamples/src/$group_name/$module_name/CMakeLists.txt
        f = open(os.path.join(
            example_src_dir, group_name, module_name, 'CMakeLists.txt'), 'a+')
        f.write('\nadd_example(' + example_name + ')\n')
        f.write(
            'compare_to_baseline(EXAMPLE_NAME ' + example_name +
            '\n  BASELINE_PREFIX OutputBaseline\n  )\n')
        f.close()

        # append 'add_example($example_name)' into
        # ITKExamples/src/$group_name/$module_name/index.rst
        f = open(os.path.join(
            example_src_dir, group_name, module_name, 'index.rst'), 'a+')
        f.write('  ' + example_name + '/Documentation.rst\n')
        f.close()

        os.mkdir(example_dir)

    example_base = os.path.join(example_dir, example_name)

    example_rst = os.path.join(example_dir, 'Documentation.rst')
    example_cxx = os.path.join(example_dir, 'Code.cxx')
    example_py = os.path.join(example_dir, 'Code.py')

    write_example_rst_file(example_rst, class_name, args.synopsis)
    write_example_cxx_file(example_cxx, class_name)
    write_example_py_file(example_py, class_name)

    # ---------------------------------------------------------
    # Write CMakeLists.txt

    cmakefile = os.path.join(example_dir, 'CMakeLists.txt')
    f = open(cmakefile, 'w')

    f.write('cmake_minimum_required(VERSION 3.10.2)\n\n')

    f.write('project(' + example_name + ')\n\n')

    f.write('find_package(ITK REQUIRED)\n')
    f.write('include(${ITK_USE_FILE})\n\n\n')

    f.write('add_executable(' + example_name + ' Code.cxx)\n')
    f.write(
        'target_link_libraries(' + example_name + ' ${ITK_LIBRARIES})\n\n')

    f.write('install(TARGETS ' + example_name + '\n')
    f.write('  DESTINATION bin/ITKExamples/' +
        group_name + '/' + module_name + '\n')
    f.write('  COMPONENT Runtime\n')
    f.write('  )\n\n')

    f.write('install(FILES Code.cxx CMakeLists.txt Code.py\n')
    f.write(
        '  DESTINATION share/ITKExamples/Code/' +
        group_name + '/' + module_name + '/' + example_name + '/\n')
    f.write('  COMPONENT Code\n')
    f.write('  )\n\n\n')

    f.write('enable_testing()\n')

    f.write('set(input_image ${CMAKE_CURRENT_BINARY_DIR}/BrainProtonDensitySlice.png)\n')
    f.write('set(output_image Output.png)\n')
    f.write('set(test_options)\n\n')

    f.write('add_test(NAME ' + example_name + 'Test\n')
    f.write(
        '  COMMAND ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/' + example_name + '\n')
    f.write('    ${input_image}\n')
    f.write('    ${output_image}\n')
    f.write('    ${test_options}\n')
    f.write('  )\n\n')

    f.write('if(ITK_WRAP_PYTHON)\n')
    f.write('  find_package(PythonInterp REQUIRED)\n')
    f.write(
        '  string(REPLACE . "Python." output_image "${output_image}")\n')
    f.write('  add_test(NAME ' + example_name + 'TestPython\n')
    f.write(
        '    COMMAND ${PYTHON_EXECUTABLE} ' +
        '${CMAKE_CURRENT_SOURCE_DIR}/Code.py\n')
    f.write('      ${input_image}\n')
    f.write('      ${output_image}\n')
    f.write('      ${test_options}\n')
    f.write('    )\n')
    f.write('endif()\n')

    f.close()

    # ---------------------------------------------------------
    # print instructions
    print ('***')
    print ('Example added successfully!')

    print ('Please:')
    print ('  1- Edit the following files:')
    print ('    * ' + example_cxx)
    print ('    * ' + example_py)
    print ('    * ' + example_rst + '\n')

    print ('  2- Commit changes in the ITKExamples source directory and push')
    print ('$ cd @ITKExamples_SOURCE_DIR@')
    print ('$ git checkout -b Add_' + example_name)
    print ('$ git add src/' + group_name + '/' + module_name)
    print ('$ git commit -a -m "ENH: Add ' + example_name + '" ')
    print ('$ git gerrit-push')
